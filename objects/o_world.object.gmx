<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize
display = 0;
objects = ds_list_create();
commands = ds_map_create();
global.serverlist = ds_list_create();
global.console = ds_list_create();
global.color_map = ds_map_create();
global.typing = false;

// networking
broadcast = network_create_server(network_socket_udp, 6511, 100);

// commands
commands[? "help"] =  "";
commands[? "clear"] = "";
commands[? "firstperson"] = "";
commands[? "special"] = "";
commands[? "server"] = ",maxClients";
commands[? "connect"] = ",ip:port";
commands[? "disconnect"] = "";

// color map
global.color_map[? "error"] = c_maroon;
global.color_map[? "name"] = c_green;
global.color_map[? "system"] = c_gray;

// welcome message
cout("Welcome to RGB.", C_SYSTEM);
cout("Type /help for a list of commands.", C_SYSTEM);
cout("Press F1 to toggle console display modes", C_SYSTEM);

// run in release
gml_release_mode(!debug_mode);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Get Objects
ds_list_clear(objects);
for (var i = 0; i &lt; instance_count; i++)
{
    if (!instance_exists(instance_id[i]))
        continue;

    var obj = instance_id[i].object_index;
    if (ds_list_find_index(objects, obj) == -1)
        ds_list_add(objects, obj);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Detect servers "broadcast"
eventid = ds_map_find_value(async_load, "id");
if(eventid == broadcast)
{
    // get server data
    ip = ds_map_find_value(async_load, "ip");
    text = buffer_read(ds_map_find_value(async_load, "buffer"), buffer_string );
    
    // add to server list
    server = string(ip) + " - " + text;
    if (ds_list_find_index(global.serverlist, server) &lt; 0)
        ds_list_add(global.serverlist, server);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Display Text
d3d_set_lighting(false);

switch (display)
{
    // console
    case 0:
        var lines = floor(view_hview[0] / 16) - 6;
        for (var i = 0; i &lt; ds_list_size(global.console); i++)
        {
            var con = global.console[| i];
            var text = ds_map_find_first(con);
            for (var j = 0; j &lt; ds_map_size(con); j++)
            {
                color = ds_map_find_value(con, text);
                var yy = 64 + (i mod lines * 16);
                drawText(14, yy, i, c_black);
                drawTextExt(32, yy, text, color, 0.75, f_hud, fa_left);
                text = ds_map_find_next(con, text);
            }
        }
        drawText(16, 50, string(ds_list_size(global.console)) + "/" + string(lines), c_orange);
        break;
    // objects
    case 1:
        for (var i = 0; i &lt; ds_list_size(objects); i++)
        {
            obj = objects[| i];
            t = instance_nearest(o_player.x, o_player.y, obj);
            drawTextExt(16, 64 + (i * 16), object_get_name(obj) + ":" + string(t), c_white, 0.75, f_hud, fa_left);
        }
        break;
    // network
    case 2:
        for (var i = 0; i &lt; ds_list_size(global.serverlist); i++)
        {
            text = global.serverlist[| i];
            drawTextExt(16, 64 + (i * 16), string(text), c_white, 0.75, f_hud, fa_left);
        }
        break;
}

if (global.typing)
{
    input = ternary(global.typing, keyboard_string + "|", keyboard_string);
    drawTextExt(16, view_hview[0] - 32, input, c_white, 0.75, f_hud, fa_left);
    drawTextExt(16, view_hview[0] - 16, parse(keyboard_string) + " : " + sha1_string_utf8(keyboard_string), c_orange, 0.5, f_hud, fa_left);
}

d3d_set_lighting(true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// D3D Floor
d3d_transform_stack_push();

celShading();
d3d_draw_floor(0, room_height, 0, room_width, 0, 0, background_get_texture(b_ground), room_width / 16, room_height / 16);
shader_reset();

d3d_transform_stack_pop();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="112">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Toggle Display
display = ternary(display &gt; 1, 0, display + 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Restart
if (!global.typing)
    game_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Quit
if (global.typing)
    global.typing = false;
else
{
    // cleanup networking
    network_destroy(broadcast);
    with (o_server) { instance_destroy(); }
    with (o_client) { instance_destroy(); }
    // cleanup arrays
    ds_list_destroy(global.serverlist);
    ds_list_destroy(global.console);
    ds_map_destroy(commands);
    ds_list_destroy(objects);
    
    game_end();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Console Input
if (global.typing)
{
    var cmd = getCommand(keyboard_string);
    switch (cmd)
    {
        case "help":
            cout("Commands:", C_SYSTEM);
            var key = ds_map_find_first(commands);
            for (var i = 0; i &lt; ds_map_size(commands); i++)
            {
                value = ds_map_find_value(commands, key);
                cout("-" + key + string_replace(string(value), ",", " "), C_SYSTEM);
                key = ds_map_find_next(commands, key);
            }
            break;
        case "firstperson":
            with (o_camera)
            {
                firstperson = !firstperson;
                cout(ternary(firstperson, "First person mode", "Chasecam mode"), C_SYSTEM);
                tilt = ternary(firstperson, 0, 30);
                zoffset = ternary(firstperson, 25, 14);
                distance = ternary(firstperson, 1, 60);
            }
            break;
        case "server":
            var server = instance_create(0, 0, o_server);
            if (instance_exists(server))
                server.max_clients = round(real(args[1]));
            cout("Server created with " + string(server.max_clients) + " max clients", C_SYSTEM);
            break;
        case "connect":
            var client = instance_create(0, 0, o_client);
            if (instance_exists(client))
                client.host = split(args[1], ":");
            break;
        case "disconnect":
            if (instance_exists(o_client))
                with(o_client) { instance_destroy(); }
            if (instance_exists(o_server))
                with(o_server) { instance_destroy(); }
            break;
        case "special":
            cout("Special Thanks to,", C_SYSTEM);
            cout("YellowAfterlife for 3D Camera example", C_SYSTEM);
            cout("Ben Dansie for Sintel model", C_SYSTEM);
            cout("SebastL for Chest model", C_SYSTEM);
            cout("Explosive James for Tree model", C_SYSTEM);
            break;
        case "invalid":
        case "misuse":
            // these are handled in getCommand
            break;
        case "clear":
            ds_list_clear(global.console);
            break;
        case "say":
            if (!isEmpty(keyboard_string))
                cout(o_player.name + ": " + vars(keyboard_string), C_NAME);
            break;
    }

    // clear and stop typing
    keyboard_string = "";
    global.typing = false;
}
else
{
    // clear and start typing
    keyboard_string = "";
    global.typing = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
