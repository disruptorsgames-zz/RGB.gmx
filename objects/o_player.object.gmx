<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize
z = 0;
size = 8;
facing = 0;
tfacing = 0;
zspeed = 0;
walkspeed = 1.75;
runspeed = 2.5;
key_x = 0;
key_y = 0;
charge = 0;
cooldown = 3 * room_speed;
name = "Sintel";
max_hp = 100;
hp = 100;
max_mana = 100;
mana = 100;
spells = ds_map_create();
shell = c_black;
invul = false;

addSpell("invul", 3);

model = d3d_model_create();
d3d_model_load(model, "Sintel.d3d");
hair = d3d_model_create();
d3d_model_load(hair, "Sintel_Hair.d3d");
eyes = d3d_model_create();
d3d_model_load(eyes, "Sintel_Eyes.d3d");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Timers

// spells
spell = ds_map_find_first(spells);
for (var i = 0; i &lt; ds_map_size(spells); i++)
{
    value = ds_map_find_value(spells, spell);
    if (value &gt; 0)
        ds_map_replace(spells, spell, value - 1);
    else if (value == 0)
        ds_map_delete(spells, spell);  
    spell = ds_map_find_next(spells, spell);
}
    
// cooldown
if (cooldown &gt; 0)
    cooldown -= 1;
    
// gravity
if (z &gt; 0) 
    zspeed -= 0.25;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Effects

// invulnerability
if (getSpell("invul") &gt; 0)
{
    invul = true;
    shell = c_red;
}
else
{
    invul = false;
    shell = c_white;/*c_black;*/
}

// spells
if (tick(getSpell("regen")))
{
    emit(10, make_color_rgb(random(155) + 100, 0, 0));
    hp += regen(self, 2);
}
else if (tick(getSpell("mana")))
{
    emit(10, make_color_rgb(0, 0, random(155) + 100));
    mana += regen(self, 2);
}
else if (tick(getSpell("poison")))
{
    gib(32, make_color_rgb(random(55) + 200, 0, 0));
    hp -= damage(self, 2);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Pickup Item
pickup = instance_nearest(x, y, o_item);
if (point_distance_3d(x, y, z, pickup.x, pickup.y, pickup.z) &lt; 16)
{
    switch(pickup.color)
    {
        case c_red:
            if (hp &lt; max_hp)
            {
                pickup.fade = true;
                addSpell("regen", 5);
            }
            break;
        case c_green:
            pickup.fade = true;
            addSpell("poison", 3);
            break;
        case c_blue:
            if (mana &lt; max_mana)
            {
                pickup.fade = true;
                addSpell("mana", 5);
            }
            break;
        case c_yellow:
            break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement

cam_d = global.camera_d;
// vector with keyboard coordinate deltas
key_x = keyboard_check(ord('W')) - keyboard_check(ord('S'));
key_y = keyboard_check(ord('D')) - keyboard_check(ord('A'));
run = keyboard_check(vk_shift);
// length of that vector
key_l = point_distance(0, 0, key_x, key_y);

// if needed, normalize vector to prevent faster diagonal movement
if (key_l &gt; 1) 
{
    key_x /= key_l;
    key_y /= key_l;
    key_l = 1;
}

// actually move around, if needed
if (key_l &gt; 0 &amp;&amp; !global.typing) 
{
    if (place_free(key_x, key_y))
    {
        x += (lengthdir_x(key_x, cam_d) + lengthdir_x(key_y, cam_d - 90)) * ternary(run, runspeed, walkspeed);
        y += (lengthdir_y(key_x, cam_d) + lengthdir_y(key_y, cam_d - 90)) * ternary(run, runspeed, walkspeed);
    }
    tfacing = point_direction(0, 0, key_x, key_y) + cam_d;
}

// hit ground
if (z &lt; 0) 
{ 
    z = 0;
    zspeed = 0;
}
// jump
if (z &lt;= 0 &amp;&amp; keyboard_check(vk_space) &amp;&amp; !global.typing) 
    zspeed = 5;
    
z += zspeed;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Camera Mode
if (!keyboard_check(vk_alt))
{
    tfacing = cam_d;
    // rotate towards target facing direction
    facing += max(-15, min(15, cycle(tfacing - facing, -180, 180)));
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Attack
if (mouse_check_button(mb_left))
{
    //tfacing = cam_d;
    if (charge &lt; 100)
        charge += 1;
}
if (mouse_check_button_released(mb_left))
{
    cooldown = charge;
    charge = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// HUD
lx = 16;
rx = view_wview[0] - 34;

d3d_set_lighting(false);

// health
draw_healthbar(lx, lx, lx + 256, lx + 16, (hp / max_hp) * 100, c_white, c_maroon, c_red, 0, false, true);
drawText(lx, lx, hp, c_white);
// mana
draw_healthbar(lx, lx + 20, lx + 256, lx + 36, (mana / max_mana) * 100, c_white, c_navy, c_blue, 0, false, true);
drawText(lx, lx + 20, mana, c_white);
// spell bar
spell = ds_map_find_first(spells);
for (var i = 0; i &lt; ds_map_size(spells); i++)
{
    draw_sprite(getIcon(spell), -1, rx - i * 32, 2);
    value = round(ds_map_find_value(spells, spell) / room_speed);
    drawText(rx - i * (32 - string_width(value)), 4, string(value) + "s", c_white);
    spell = ds_map_find_next(spells, spell);
}
// retina
r = sqr(size * 2) / (o_camera.distance / 32);
draw_circle_color(view_wview[0] / 2, view_hview[0] / 2, r, c_black, c_black, 1);
// incoming attack
/*for (var i = 0; i &lt; ds_list_size(targets); i++)
{
    t = ds_list_find_value(targets, i);
    if (instance_exists(t))
    {
        ax = lengthdir_x(r, t.attack_dir);
        ay = lengthdir_y(r, t.attack_dir);
        draw_circle_color(view_wview[0] / 2 + ax, view_hview[0] / 2 + ay, r / 8, t.color, t.color, false);
    }
}*/
    
d3d_set_lighting(true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// D3D
d3d_transform_stack_push();

// positioning
d3d_transform_set_rotation_z(270);
d3d_transform_add_scaling(15, 15, 15);
d3d_transform_add_rotation_z(facing);
d3d_transform_add_translation(x, y, z + 1);
// drawing
celShading();
//drawBlock(c_white, size, background_get_texture(b_player), shell);
draw_set_color(shell);
d3d_model_draw(model, 0, 0, 0, background_get_texture(b_player));
d3d_model_draw(hair, 0, 0, 0, background_get_texture(b_hair));
d3d_model_draw(eyes, 0, 0, 0, background_get_texture(b_eye));
draw_set_color(c_white);
shader_reset();

d3d_transform_stack_pop();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,0</point>
    <point>16,16</point>
    <point>0,16</point>
  </PhysicsShapePoints>
</object>
