<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize

// coordinates / size 
z = 0;
scale = 1;
size = 8; // size of object
ssize = size + 0.5; // size of shadow
zsize = 32; // size on Z axis
facing = 0; // facing direction
tfacing = 0; // target facing direction
// movement
zspeed = 0;
walkspeed = 1.75; // movement speed
cooldown = 90;
charge = 0;
spawn = 0;
key_x = 0;
key_y = 0;
// stats
max_hp = 100;
hp = 50;
max_mana = 100;
mana = 0;
// other
target = o_item;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement

cam_d = global.camera_d;
// vector with keyboard coordinate deltas
key_x = keyboard_check(ord('W')) - keyboard_check(ord('S'));
key_y = keyboard_check(ord('D')) - keyboard_check(ord('A'));
// length of that vector
key_l = point_distance(0, 0, key_x, key_y);

// if needed, normalize vector to prevent faster diagonal movement
if (key_l &gt; 1) 
{
    key_x /= key_l;
    key_y /= key_l;
    key_l = 1;
}

// actually move around, if needed
if (key_l &gt; 0) 
{
    x += (lengthdir_x(key_x, cam_d) + lengthdir_x(key_y, cam_d - 90)) * walkspeed;
    y += (lengthdir_y(key_x, cam_d) + lengthdir_y(key_y, cam_d - 90)) * walkspeed;
    tfacing = point_direction(0, 0, key_x, key_y) + cam_d;
}

// camera view with ALT
//if (!keyboard_check(vk_alt))
//{
    //tfacing = cam_d;
    // rotate towards target facing direction
    facing += max(-15, min(15, cycle(tfacing - facing, -180, 180)));
//}

// z movement
if (z &gt; 0) 
    zspeed -= 0.25; // accelerate downwards if in air
z += zspeed;
if (z &lt; 0) 
{ 
    // hit ground
    z = 0;
    zspeed = 0;
}
if ((z &lt;= 0) &amp;&amp; keyboard_check(vk_space)) 
    zspeed = 5; // jumping
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Attack
if (mouse_check_button(mb_left))
{
    //tfacing = cam_d;
    if (charge &lt; 100)
        charge += 1;
}
if (mouse_check_button_released(mb_left))
{
    cooldown = charge;
    charge = 0;
}

// cooldown
if (cooldown &gt; 0)
    cooldown -= 1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Spawn
if (spawn &lt; 1.0)
    spawn += 0.025;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Targeting &amp; Pickup
target = instance_nearest(x, y, o_item);
// pickup
if (instance_exists(target) &amp;&amp; point_distance_3d(x, y, z, target.x, target.y, target.z) &lt; 16)
{
    switch(color_get_hue(target.color))
    {
        // red
        case 0:
            if (hp &lt; max_hp)
            {
                target.decay = true;
                hp += 2;
            }
            break;
        // green
        case 85:
            break;
        // blue
        case 170:
            if (mana &lt; max_mana)
            {
                target.decay = true;
                mana += 2;
            }
            break;
        // yellow
        case 43:
            break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// HUD
offset = 16;
xx = view_wview[0] / 2;
yy = view_hview[0] / 2;

d3d_set_lighting(false);

draw_healthbar(offset, offset, offset + 256, offset + 16, (hp / max_hp) * 100, c_white, c_maroon, c_red, 0, false, true);
draw_text_color(offset, offset, hp, c_white, c_white, c_white, c_white, 1.0);

draw_healthbar(offset, offset + 20, offset + 256, offset + 36, (mana / max_mana) * 100, c_white, c_navy, c_blue, 0, false, true);
draw_text_color(offset, offset + 20, mana, c_white, c_white, c_white, c_white, 1.0);

if (instance_exists(target))
{
    // attack direction
    r = sqr(zsize / 1.5) / (o_camera.distance / 32);
    ax = lengthdir_x(r, target.attack_dir);
    ay = lengthdir_y(r, target.attack_dir);
    draw_circle_color(view_wview[0] / 2, view_hview[0] / 2 - zsize, r, c_black, c_black, 1);
    draw_circle_color(view_wview[0] / 2 + ax, view_hview[0] / 2 - zsize + ay, r / 8, target.color, target.color, false);
}
    
d3d_set_lighting(true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// D3D
d3d_transform_stack_push();
 
// positioning
d3d_transform_add_rotation_z(facing);
d3d_transform_add_scaling(scale, scale, scale);
d3d_transform_add_translation(x, y, z + 1);
// drawing
celShading();
draw_set_alpha(spawn);
draw_set_color(c_black);
d3d_draw_block(-ssize, -ssize, zsize + 0.5, ssize, ssize, -0.5, -1, 1, 1);
draw_set_color(c_white);
d3d_draw_block(-size, -size, 0, size, size, zsize, background_get_texture(b_player), 1, 1);
shader_reset();

d3d_transform_stack_pop();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>8,8</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
