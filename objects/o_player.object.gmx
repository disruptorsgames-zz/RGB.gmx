<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize
z = 0;
size = 11; // 8 (windowed)
facing = 0;
tfacing = 0;
zspeed = 0;
walkspeed = 1.75;
runspeed = 2.5;
key_x = 0;
key_y = 0;
charge = 0;
cooldown = 0;
name = "Sintel";
max_health = 200;
health = 100;
max_mana = 100;
mana = 0;
shell = c_black;
invul = false;
freelook = false;
next = 0;
target_area = 50;
target = noone;
targets = ds_list_create();

// spells
spells = ds_map_create();
spells[? "invul"] = setTick(3);

// hotbar
hotbar1 = ds_list_create();
ds_list_add(hotbar1, s_hotbar_mana);
ds_list_add(hotbar1, s_hotbar_health);
ds_list_add(hotbar1, s_hotbar_poison);

// model
model = d3d_model_create();
d3d_model_load(model, ".\Sintel\Sintel.d3d");
hair = d3d_model_create();
d3d_model_load(hair, ".\Sintel\Sintel_Hair.d3d");
hair1 = d3d_model_create();
d3d_model_load(hair1, ".\Sintel\Sintel_Hair1.d3d");
eyes = d3d_model_create();
d3d_model_load(eyes, ".\Sintel\Sintel_Eyes.d3d");
mouth = d3d_model_create();
d3d_model_load(mouth, ".\Sintel\Sintel_Mouth.d3d");
pants = d3d_model_create();
d3d_model_load(pants, ".\Sintel\Sintel_Pants.d3d");
shirt = d3d_model_create();
d3d_model_load(shirt, ".\Sintel\Sintel_Shirt.d3d");
boots = d3d_model_create();
d3d_model_load(boots, ".\Sintel\Sintel_Boots.d3d");
gloves = d3d_model_create();
d3d_model_load(gloves, ".\Sintel\Sintel_Gloves.d3d");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Timers

// spells
spell = ds_map_find_first(spells);
for (var i = 0; i &lt; ds_map_size(spells); i++)
{
    value = ds_map_find_value(spells, spell);
    if (value &gt; 0)
        ds_map_replace(spells, spell, value - 1);
    else if (value == 0)
        ds_map_delete(spells, spell);  
    spell = ds_map_find_next(spells, spell);
}
    
// cooldown
if (cooldown &gt; 0)
    cooldown -= 1;
    
// gravity
if (z &gt; 0) 
    zspeed -= 0.25;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Effects

// invulnerability
if (spells[? "invul"] &gt; 0)
{
    invul = true;
    shell = c_red;
}
else
{
    invul = false;
    shell = c_white;
}

// spells
if (tick(spells[? "regen"]))
{
    //emit(10, make_color_rgb(random(155) + 100, 0, 0));
    cout(name + " reguvinated 5 health!", C_SYSTEM);
    health += ternary(health &gt;= max_health, 0, heal(self, 5));
}
else if (tick(spells[? "mana"]))
{
    //emit(10, make_color_rgb(0, 0, random(155) + 100));
    cout(name + " reguvinated 5 mana!", C_SYSTEM);
    mana += ternary(mana &gt;= max_mana, 0, heal(self, 5));
}
else if (tick(spells[? "poison"]))
{
    //gib(32, make_color_rgb(random(55) + 200, 0, 0));
    cout(name + " was poisoned for 5 damage!", C_SYSTEM);
    health -= damage(self, 5);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Pickup Item
pickup = instance_nearest(x, y, o_item);
if (point_distance_3d(x, y, z, pickup.x, pickup.y, pickup.z) &lt; 16)
{
    switch(pickup.color)
    {
        case c_red:
            if (health &lt; max_health &amp;&amp; !pickup.fade)
            {
                pickup.fade = true;
                health += heal(self, 10);
            }
            break;
        case c_green:
            if (!pickup.fade)
            {
                pickup.fade = true;
                health -= damage(self, 10);
            }
            break;
        case c_blue:
            if (mana &lt; max_mana &amp;&amp; !pickup.fade)
            {
                pickup.fade = true;
                mana += heal(self, 10);   
            }
            break;
    }
    target = noone;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement

cam_d = global.camera_d;
// vector with keyboard coordinate deltas
key_x = keyboard_check(ord('W')) - keyboard_check(ord('S'));
key_y = keyboard_check(ord('D')) - keyboard_check(ord('A'));
run = keyboard_check(vk_shift);
// length of that vector
key_l = point_distance(0, 0, key_x, key_y);

// if needed, normalize vector to prevent faster diagonal movement
if (key_l &gt; 1) 
{
    key_x /= key_l;
    key_y /= key_l;
    key_l = 1;
}

// actually move around, if needed
if (key_l &gt; 0 &amp;&amp; !global.typing) 
{
    if (place_free(key_x, key_y))
    {
        x += (lengthdir_x(key_x, cam_d) + lengthdir_x(key_y, cam_d - 90)) * ternary(run, runspeed, walkspeed);
        y += (lengthdir_y(key_x, cam_d) + lengthdir_y(key_y, cam_d - 90)) * ternary(run, runspeed, walkspeed);
    }
    tfacing = point_direction(0, 0, key_x, key_y) + cam_d;
}

// hit ground
if (z &lt; 0) 
{ 
    z = 0;
    zspeed = 0;
}
// jump
if (z &lt;= 0 &amp;&amp; keyboard_check(vk_space) &amp;&amp; !global.typing) 
    zspeed = 5;
    
z += zspeed;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Camera Mode
if (!freelook)
{
    tfacing = cam_d;
    // rotate towards target facing direction
    facing += max(-15, min(15, cycle(tfacing - facing, -180, 180)));
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Attack
if (mouse_check_button(mb_left) &amp;&amp; cooldown == 0)
{
    //tfacing = cam_d;
    if (charge &lt; 100)
        charge += 1;
}
else if (mouse_check_button_released(mb_left) &amp;&amp; cooldown == 0)
{
    cooldown = charge;
    charge = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Targeting
ds_list_clear(targets);
for (var i = 0; i &lt; instance_count; i++)
{
    var instance = instance_id[i], obj = instance.object_index;
    
    if (!instance_exists(instance) || object_get_parent(obj) != o_thing)
        continue;
    
    if (distance_to_object(instance) &lt; target_area)
        ds_list_add(targets, instance);
}

if (keyboard_check_pressed(vk_tab))
{    
    // loop next
    var len = ds_list_size(targets);
    if (next &gt;= len)
        next = 0;
    // move to next
    var nearest = instance_nearest(x, y, o_thing);
    if (target != nearest &amp;&amp; distance_to_object(nearest) &lt; target_area)
        target = nearest;
    else
    {
        target = targets[| next];
        next++;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hotbar
if (keyboard_check(ord('1')))
{
    var sprite = sprite_get_name(hotbar1[| 1]);
    switch(sprite)
    {
        case "s_hotbar_health":
            if (mana &gt;= 50)
            {
                mana -= heal(self, 50);
                spells[? "regen"] = setTick(5);
            }
            break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// HUD
offset = 16;
rx = view_wview[0] - 34;
cx = view_wview[0] / 2;
cy = view_hview[0] / 2;
bottomY = view_yview[0] + view_hview[0];

d3d_set_lighting(false);

// health
draw_healthbar(offset, offset, offset + 256, offset + 16, (health / 100) * 100, c_white, c_maroon, c_red, 0, false, true);
drawText(offset, offset, health, c_white);
/* overheal
if (health &gt; 100)
{
    ox = offset + 257;
    draw_triangle_colour(ox - (health - 100), offset, ox, offset, ox, offset + 17, c_maroon, c_maroon, c_maroon, false); 
}*/
// mana
draw_healthbar(offset, offset + 20, offset + 256, offset + 36, (mana / max_mana) * 100, c_white, c_navy, c_blue, 0, false, true);
drawText(offset, offset + 20, mana, c_white);
// spell bar
spell = ds_map_find_first(spells);
for (var i = 0; i &lt; ds_map_size(spells); i++)
{
    var value = round(spells[? spell] / GAME_TICK);
    draw_sprite(getIcon(spell), -1, rx - (i * 32), 2);
    drawText(rx - (i * 32) + 12, 8, value, c_white);
    spell = ds_map_find_next(spells, spell);
}
// retina
r = sqr(size * 2) / (o_camera.distance / 32);
draw_circle_color(cx, cy, r, c_black, c_black, 1);
// cooldown
drawTextIf(cx - r + 32, cy, charge, c_white, charge &gt; 0);
drawTextIf(cx + r - 32, cy, cooldown, c_white, cooldown &gt; 0);
// incoming attack &amp; targets
for (var i = 0; i &lt; ds_list_size(targets); i++)
{
    var ax, ay, tn, t;
    t = targets[| i];
    if (instance_exists(t))
    {
        tn = object_get_name(t.object_index);
        ax = lengthdir_x(r, t.attack_dir);
        ay = lengthdir_y(r, t.attack_dir);
        draw_circle_color(cx + ax, cy + ay, r / 8, t.color, t.color, false);
        drawTextExt(cx + ax - 5, cy + ay - 10, string_upper(string_char_at(tn, 3)), ternary(target == t, c_black, c_white), 1.0, f_hud_l, fa_left);
        drawTextExt(cx - r * 2, cy + i * 16, tn + ":" + string(t), ternary(target == t, c_black, c_red), 0.5, f_hud_l, fa_right);
    }
}
// hotbar 1 - draw hotbar last
for(var i = 0; i &lt; ds_list_size(hotbar1); i++)
{
    var value = hotbar1[| i];
    var xx = cx - i * (sprite_get_width(value) + 4);
    var yy = bottomY - (sprite_get_height(value) + 4);
    draw_sprite(value, -1, xx, yy);
    drawText(xx, yy, i, c_white);
    draw_rectangle_color(xx, yy, xx + sprite_get_width(value), yy + sprite_get_height(value), c_black, c_black, c_black, c_black, true);
}
    
d3d_set_lighting(true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// D3D
d3d_transform_stack_push();

// positioning
d3d_transform_set_rotation_z(270);
d3d_transform_add_scaling(15, 15, 15);
d3d_transform_add_rotation_z(facing);
d3d_transform_add_translation(x, y, z + 1);
// drawing
celShading();
//drawBlock(c_white, size, background_get_texture(b_player), shell);
draw_set_color(shell);
d3d_model_draw(model, 0, 0, 0, background_get_texture(b_skin));
d3d_model_draw(eyes, 0, 0, 0, background_get_texture(b_eye));
d3d_model_draw(mouth, 0, 0, 0, background_get_texture(b_mouth));
d3d_model_draw(hair, 0, 0, 0, background_get_texture(b_hair));
d3d_model_draw(hair1, 0, 0, 0, background_get_texture(b_hair));
d3d_model_draw(pants, 0, 0, 0, background_get_texture(b_pants));
d3d_model_draw(shirt, 0, 0, 0, background_get_texture(b_shirt));
d3d_model_draw(boots, 0, 0, 0, background_get_texture(b_boots));
d3d_model_draw(gloves, 0, 0, 0, background_get_texture(b_gloves));
draw_set_color(c_white);
shader_reset();

d3d_transform_stack_pop();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Target Area
d3d_set_lighting(false);

draw_rectangle_color(x - target_area, y - target_area, x + target_area, y + target_area, c_black, c_black, c_black, c_black, true);

d3d_set_lighting(true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,0</point>
    <point>16,16</point>
    <point>0,16</point>
  </PhysicsShapePoints>
</object>
