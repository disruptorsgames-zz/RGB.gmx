<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize
z = 0;
size = 8;
facing = 0;
tfacing = 0;
zspeed = 0;
walkspeed = 1.75;
key_x = 0;
key_y = 0;
charge = 0;
cooldown = 3 * room_speed;
max_hp = 100;
hp = 50;
max_mana = 100;
mana = 0;
spells = ds_map_create();
shell = c_black;

addSpell("spawn", 2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Timers

// spells
s = ds_map_find_first(spells);
for (var i = 0; i &lt; ds_map_size(spells); i++)
{
    val = ds_map_find_value(spells, s);
    
    if (val &gt; 0)
        ds_map_replace(spells, s, val - 1);
    if (val == 0)
        ds_map_delete(spells, s);
        
    s = ds_map_find_next(spells, s);
}
    
// cooldown
if (cooldown &gt; 0)
    cooldown -= 1;
    
// gravity
if (z &gt; 0) 
    zspeed -= 0.25;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Effects

// spawn protection
if (getSpell("spawn") &gt; 0)
    shell = c_red;
else
    shell = c_black;

// spells
if (tick(getSpell("regen")))
{
    emit(10, make_color_rgb(random(155) + 100, 0, 0));
    hp += 2;
}
else if (tick(getSpell("mana")))
{
    emit(10, make_color_rgb(0, 0, random(155) + 100));
    mana += 2;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Pickup Item
pickup = instance_nearest(x, y, o_item);
if (point_distance_3d(x, y, z, pickup.x, pickup.y, pickup.z) &lt; 16)
{
    switch(pickup.color)
    {
        case c_red:
            if (hp &lt; max_hp)
            {
                pickup.fade = true;
                addSpell("regen", 5);
            }
            break;
        case c_green:
            break;
        case c_blue:
            if (mana &lt; max_mana)
            {
                pickup.fade = true;
                addSpell("mana", 5);
            }
            break;
        case c_yellow:
            break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement

cam_d = global.camera_d;
// vector with keyboard coordinate deltas
key_x = keyboard_check(ord('W')) - keyboard_check(ord('S'));
key_y = keyboard_check(ord('D')) - keyboard_check(ord('A'));
// length of that vector
key_l = point_distance(0, 0, key_x, key_y);

// if needed, normalize vector to prevent faster diagonal movement
if (key_l &gt; 1) 
{
    key_x /= key_l;
    key_y /= key_l;
    key_l = 1;
}

// actually move around, if needed
if (key_l &gt; 0) 
{
    x += (lengthdir_x(key_x, cam_d) + lengthdir_x(key_y, cam_d - 90)) * walkspeed;
    y += (lengthdir_y(key_x, cam_d) + lengthdir_y(key_y, cam_d - 90)) * walkspeed;
    tfacing = point_direction(0, 0, key_x, key_y) + cam_d;
}

// hit ground
if (z &lt; 0) 
{ 
    z = 0;
    zspeed = 0;
}
// jump
if (z &lt;= 0 &amp;&amp; keyboard_check(vk_space)) 
    zspeed = 5;
    
z += zspeed;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Camera Mode
if (!keyboard_check(vk_alt))
{
    tfacing = cam_d;
    // rotate towards target facing direction
    facing += max(-15, min(15, cycle(tfacing - facing, -180, 180)));
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Attack
if (mouse_check_button(mb_left))
{
    //tfacing = cam_d;
    if (charge &lt; 100)
        charge += 1;
}
if (mouse_check_button_released(mb_left))
{
    cooldown = charge;
    charge = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// HUD
lx = 16;
rx = view_wview[0] - 34;

d3d_set_lighting(false);

// health
draw_healthbar(lx, lx, lx + 256, lx + 16, (hp / max_hp) * 100, c_white, c_maroon, c_red, 0, false, true);
drawText(lx, lx, hp, c_white);
// mana
draw_healthbar(lx, lx + 20, lx + 256, lx + 36, (mana / max_mana) * 100, c_white, c_navy, c_blue, 0, false, true);
drawText(lx, lx + 20, mana, c_white);
// spell bar
spell = ds_map_find_first(spells);
for (var i = 0; i &lt; ds_map_size(spells); i++)
{
    draw_sprite(getIcon(spell), -1, rx - i * 32, 2);
    value = round(ds_map_find_value(spells, spell) / room_speed);
    drawText(rx - i * (32 - string_width(value)), 4, string(value) + "s", c_white);
    spell = ds_map_find_next(spells, spell);
}
// retina
r = sqr(size * 2) / (o_camera.distance / 32);
draw_circle_color(view_wview[0] / 2, view_hview[0] / 2, r, c_black, c_black, 1);
// incoming attack
/*for (var i = 0; i &lt; ds_list_size(targets); i++)
{
    t = ds_list_find_value(targets, i);
    if (instance_exists(t))
    {
        ax = lengthdir_x(r, t.attack_dir);
        ay = lengthdir_y(r, t.attack_dir);
        draw_circle_color(view_wview[0] / 2 + ax, view_hview[0] / 2 + ay, r / 8, t.color, t.color, false);
    }
}*/
    
d3d_set_lighting(true);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// HUD (debug)
d3d_set_lighting(false);

if (debug_mode)
{
    // draw all instances
    for (var i = 0; i &lt; instance_count; i++)
    {
        obj = instance_id[i].object_index;
        drawTextExt(16, 64 + (i * 16), object_get_name(obj), c_white, 0.75, f_hud, fa_left);
    }
}

d3d_set_lighting(true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// D3D
d3d_transform_stack_push();
 
// positioning
d3d_transform_add_rotation_z(facing);
d3d_transform_add_translation(x, y, z + 1);
// drawing
celShading();
drawBlock(c_white, size, background_get_texture(b_player), shell);
shader_reset();

d3d_transform_stack_pop();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>8,8</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
