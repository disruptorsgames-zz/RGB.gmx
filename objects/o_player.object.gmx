<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize

// coordinates / size 
z = 0;
scale = 1;
zsize = 16; // size on Z axis
facing = 0; // facing direction
tfacing = 0; // target facing direction
// movement
zspeed = 0;
walkspeed = 2.3; // movement speed
cooldown = 90;
charge = 0;
// shader
cslightPos = shader_get_uniform(sh_celshading, "lightPos");
celSample = shader_get_sampler_index(sh_celshading, "celShadingSample");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement

cam_d = global.camera_d;
// vector with keyboard coordinate deltas
key_x = keyboard_check(ord('W')) - keyboard_check(ord('S'));
key_y = keyboard_check(ord('D')) - keyboard_check(ord('A'));
// length of that vector
key_l = point_distance(0, 0, key_x, key_y);

// if needed, normalize vector to prevent faster diagonal movement
if (key_l &gt; 1) 
{
    key_x /= key_l;
    key_y /= key_l;
    key_l = 1;
}

// actually move around, if needed
if (key_l &gt; 0) 
{
    x += (lengthdir_x(key_x, cam_d) + lengthdir_x(key_y, cam_d - 90)) * walkspeed;
    y += (lengthdir_y(key_x, cam_d) + lengthdir_y(key_y, cam_d - 90)) * walkspeed;
    tfacing = point_direction(0, 0, key_x, key_y) + cam_d;
}

// z movement
if (z &gt; 0) 
    zspeed -= 0.5 // accelerate downwards if in air
z += zspeed;
if (z &lt; 0) 
{ 
    // hit ground
    z = 0;
    zspeed = 0;
}
if ((z &lt;= 0) &amp;&amp; keyboard_check(vk_space)) 
    zspeed = 6; // jumping
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Attack
if (mouse_check_button(mb_left))
{
    //tfacing = cam_d;
    if (charge &lt; 100)
        charge += 1;
}
if (mouse_check_button_released(mb_left))
{
    cooldown = charge;
    charge = 0;
}

// cooldown
if (cooldown &gt; 0)
    cooldown -= 1;

// rotate towards target facing direction:
facing += max(-15, min(15, cycle(tfacing - facing, -180, 180)));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// D3D
d3d_transform_stack_push();
 
// rotation / translatoin
d3d_transform_add_rotation_z(facing);
d3d_transform_add_scaling(scale, scale, scale);
d3d_transform_add_translation(x, y, z + 1);
// drawing
shader_set(sh_celshading);
shader_set_uniform_f(cslightPos, o_environment.x, o_environment.y, o_environment.z);
texture_set_stage(celSample, background_get_texture(b_celshading));
draw_set_alpha(1.0);
draw_set_color(c_black);
d3d_draw_block(-8.5, -8.5, 16.5, 8.5, 8.5, -0.5, -1, 1, 1);
draw_set_color(c_white);
d3d_draw_block(-8, -8, 0, 8, 8, 16, background_get_texture(b_player), 1, 1);
shader_reset();

d3d_transform_stack_pop();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>8,8</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
